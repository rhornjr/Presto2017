#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PrestoCommon.Data.SqlServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PrestoDemo")]
	public partial class PrestoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTaskBaseRecord(TaskBaseRecord instance);
    partial void UpdateTaskBaseRecord(TaskBaseRecord instance);
    partial void DeleteTaskBaseRecord(TaskBaseRecord instance);
    partial void InsertCustomVariableRecord(CustomVariableRecord instance);
    partial void UpdateCustomVariableRecord(CustomVariableRecord instance);
    partial void DeleteCustomVariableRecord(CustomVariableRecord instance);
    partial void InsertApplicationRecord(ApplicationRecord instance);
    partial void UpdateApplicationRecord(ApplicationRecord instance);
    partial void DeleteApplicationRecord(ApplicationRecord instance);
    partial void InsertCustomVariableGroupRecord(CustomVariableGroupRecord instance);
    partial void UpdateCustomVariableGroupRecord(CustomVariableGroupRecord instance);
    partial void DeleteCustomVariableGroupRecord(CustomVariableGroupRecord instance);
    partial void InsertApplicationCustomVariableGroupRecord(ApplicationCustomVariableGroupRecord instance);
    partial void UpdateApplicationCustomVariableGroupRecord(ApplicationCustomVariableGroupRecord instance);
    partial void DeleteApplicationCustomVariableGroupRecord(ApplicationCustomVariableGroupRecord instance);
    #endregion
		
		public PrestoDataContext() : 
				base(global::PrestoCommon.Properties.Settings.Default.PrestoDemoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PrestoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrestoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrestoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrestoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TaskBaseRecord> TaskBaseRecords
		{
			get
			{
				return this.GetTable<TaskBaseRecord>();
			}
		}
		
		public System.Data.Linq.Table<CustomVariableRecord> CustomVariableRecords
		{
			get
			{
				return this.GetTable<CustomVariableRecord>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationRecord> ApplicationRecords
		{
			get
			{
				return this.GetTable<ApplicationRecord>();
			}
		}
		
		public System.Data.Linq.Table<CustomVariableGroupRecord> CustomVariableGroupRecords
		{
			get
			{
				return this.GetTable<CustomVariableGroupRecord>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationCustomVariableGroupRecord> ApplicationCustomVariableGroupRecords
		{
			get
			{
				return this.GetTable<ApplicationCustomVariableGroupRecord>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Presto.TaskBase")]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="1", Type=typeof(TaskBaseRecord), IsDefault=true)]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="2", Type=typeof(TaskDosCommandRecord))]
	public partial class TaskBaseRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private bool _FailureCausesAllStop;
		
		private int _Sequence;
		
		private bool _TaskSucceeded;
		
		private int _ApplicationId;
		
		private System.Data.Linq.Binary _VersionNumber;
		
		private System.Nullable<int> _Type;
		
		private EntityRef<ApplicationRecord> _ApplicationRecord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFailureCausesAllStopChanging(bool value);
    partial void OnFailureCausesAllStopChanged();
    partial void OnSequenceChanging(int value);
    partial void OnSequenceChanged();
    partial void OnTaskSucceededChanging(bool value);
    partial void OnTaskSucceededChanged();
    partial void OnApplicationIdChanging(int value);
    partial void OnApplicationIdChanged();
    partial void OnVersionNumberChanging(System.Data.Linq.Binary value);
    partial void OnVersionNumberChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    #endregion
		
		public TaskBaseRecord()
		{
			this._ApplicationRecord = default(EntityRef<ApplicationRecord>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailureCausesAllStop", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool FailureCausesAllStop
		{
			get
			{
				return this._FailureCausesAllStop;
			}
			set
			{
				if ((this._FailureCausesAllStop != value))
				{
					this.OnFailureCausesAllStopChanging(value);
					this.SendPropertyChanging();
					this._FailureCausesAllStop = value;
					this.SendPropertyChanged("FailureCausesAllStop");
					this.OnFailureCausesAllStopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskSucceeded", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool TaskSucceeded
		{
			get
			{
				return this._TaskSucceeded;
			}
			set
			{
				if ((this._TaskSucceeded != value))
				{
					this.OnTaskSucceededChanging(value);
					this.SendPropertyChanging();
					this._TaskSucceeded = value;
					this.SendPropertyChanged("TaskSucceeded");
					this.OnTaskSucceededChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._ApplicationRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionNumber", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionNumber
		{
			get
			{
				return this._VersionNumber;
			}
			set
			{
				if ((this._VersionNumber != value))
				{
					this.OnVersionNumberChanging(value);
					this.SendPropertyChanging();
					this._VersionNumber = value;
					this.SendPropertyChanged("VersionNumber");
					this.OnVersionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int", UpdateCheck=UpdateCheck.Never, IsDiscriminator=true)]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_TaskBaseRecord", Storage="_ApplicationRecord", ThisKey="ApplicationId", OtherKey="Id", IsForeignKey=true)]
		public ApplicationRecord ApplicationRecord
		{
			get
			{
				return this._ApplicationRecord.Entity;
			}
			set
			{
				ApplicationRecord previousValue = this._ApplicationRecord.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationRecord.Entity = null;
						previousValue.TaskBaseRecords.Remove(this);
					}
					this._ApplicationRecord.Entity = value;
					if ((value != null))
					{
						value.TaskBaseRecords.Add(this);
						this._ApplicationId = value.Id;
					}
					else
					{
						this._ApplicationId = default(int);
					}
					this.SendPropertyChanged("ApplicationRecord");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class TaskDosCommandRecord : TaskBaseRecord
	{
		
		private string _DosExecutable;
		
		private System.Nullable<int> _AfterTaskPauseInSeconds;
		
		private string _Parameters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDosExecutableChanging(string value);
    partial void OnDosExecutableChanged();
    partial void OnAfterTaskPauseInSecondsChanging(System.Nullable<int> value);
    partial void OnAfterTaskPauseInSecondsChanged();
    partial void OnParametersChanging(string value);
    partial void OnParametersChanged();
    #endregion
		
		public TaskDosCommandRecord()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DosExecutable", DbType="NVarChar(150)", UpdateCheck=UpdateCheck.Never)]
		public string DosExecutable
		{
			get
			{
				return this._DosExecutable;
			}
			set
			{
				if ((this._DosExecutable != value))
				{
					this.OnDosExecutableChanging(value);
					this.SendPropertyChanging();
					this._DosExecutable = value;
					this.SendPropertyChanged("DosExecutable");
					this.OnDosExecutableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AfterTaskPauseInSeconds", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> AfterTaskPauseInSeconds
		{
			get
			{
				return this._AfterTaskPauseInSeconds;
			}
			set
			{
				if ((this._AfterTaskPauseInSeconds != value))
				{
					this.OnAfterTaskPauseInSecondsChanging(value);
					this.SendPropertyChanging();
					this._AfterTaskPauseInSeconds = value;
					this.SendPropertyChanged("AfterTaskPauseInSeconds");
					this.OnAfterTaskPauseInSecondsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parameters", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				if ((this._Parameters != value))
				{
					this.OnParametersChanging(value);
					this.SendPropertyChanging();
					this._Parameters = value;
					this.SendPropertyChanged("Parameters");
					this.OnParametersChanged();
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Presto.CustomVariable")]
	public partial class CustomVariableRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Key;
		
		private string _Value;
		
		private int _CustomVariableGroupId;
		
		private System.Data.Linq.Binary _VersionNumber;
		
		private EntityRef<CustomVariableGroupRecord> _CustomVariableGroupRecord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCustomVariableGroupIdChanging(int value);
    partial void OnCustomVariableGroupIdChanged();
    partial void OnVersionNumberChanging(System.Data.Linq.Binary value);
    partial void OnVersionNumberChanged();
    #endregion
		
		public CustomVariableRecord()
		{
			this._CustomVariableGroupRecord = default(EntityRef<CustomVariableGroupRecord>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomVariableGroupId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CustomVariableGroupId
		{
			get
			{
				return this._CustomVariableGroupId;
			}
			set
			{
				if ((this._CustomVariableGroupId != value))
				{
					if (this._CustomVariableGroupRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomVariableGroupIdChanging(value);
					this.SendPropertyChanging();
					this._CustomVariableGroupId = value;
					this.SendPropertyChanged("CustomVariableGroupId");
					this.OnCustomVariableGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionNumber", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionNumber
		{
			get
			{
				return this._VersionNumber;
			}
			set
			{
				if ((this._VersionNumber != value))
				{
					this.OnVersionNumberChanging(value);
					this.SendPropertyChanging();
					this._VersionNumber = value;
					this.SendPropertyChanged("VersionNumber");
					this.OnVersionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomVariableGroup_CustomVariableRecord", Storage="_CustomVariableGroupRecord", ThisKey="CustomVariableGroupId", OtherKey="Id", IsForeignKey=true)]
		public CustomVariableGroupRecord CustomVariableGroupRecord
		{
			get
			{
				return this._CustomVariableGroupRecord.Entity;
			}
			set
			{
				CustomVariableGroupRecord previousValue = this._CustomVariableGroupRecord.Entity;
				if (((previousValue != value) 
							|| (this._CustomVariableGroupRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomVariableGroupRecord.Entity = null;
						previousValue.CustomVariableRecords.Remove(this);
					}
					this._CustomVariableGroupRecord.Entity = value;
					if ((value != null))
					{
						value.CustomVariableRecords.Add(this);
						this._CustomVariableGroupId = value.Id;
					}
					else
					{
						this._CustomVariableGroupId = default(int);
					}
					this.SendPropertyChanged("CustomVariableGroupRecord");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Presto.Application")]
	public partial class ApplicationRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Version;
		
		private System.Data.Linq.Binary _VersionNumber;
		
		private EntitySet<TaskBaseRecord> _TaskBaseRecords;
		
		private EntitySet<ApplicationCustomVariableGroupRecord> _ApplicationCustomVariableGroupRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnVersionNumberChanging(System.Data.Linq.Binary value);
    partial void OnVersionNumberChanged();
    #endregion
		
		public ApplicationRecord()
		{
			this._TaskBaseRecords = new EntitySet<TaskBaseRecord>(new Action<TaskBaseRecord>(this.attach_TaskBaseRecords), new Action<TaskBaseRecord>(this.detach_TaskBaseRecords));
			this._ApplicationCustomVariableGroupRecords = new EntitySet<ApplicationCustomVariableGroupRecord>(new Action<ApplicationCustomVariableGroupRecord>(this.attach_ApplicationCustomVariableGroupRecords), new Action<ApplicationCustomVariableGroupRecord>(this.detach_ApplicationCustomVariableGroupRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionNumber", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionNumber
		{
			get
			{
				return this._VersionNumber;
			}
			set
			{
				if ((this._VersionNumber != value))
				{
					this.OnVersionNumberChanging(value);
					this.SendPropertyChanging();
					this._VersionNumber = value;
					this.SendPropertyChanged("VersionNumber");
					this.OnVersionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_TaskBaseRecord", Storage="_TaskBaseRecords", ThisKey="Id", OtherKey="ApplicationId")]
		public EntitySet<TaskBaseRecord> TaskBaseRecords
		{
			get
			{
				return this._TaskBaseRecords;
			}
			set
			{
				this._TaskBaseRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_ApplicationCustomVariableGroup", Storage="_ApplicationCustomVariableGroupRecords", ThisKey="Id", OtherKey="ApplicationId")]
		public EntitySet<ApplicationCustomVariableGroupRecord> ApplicationCustomVariableGroupRecords
		{
			get
			{
				return this._ApplicationCustomVariableGroupRecords;
			}
			set
			{
				this._ApplicationCustomVariableGroupRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaskBaseRecords(TaskBaseRecord entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationRecord = this;
		}
		
		private void detach_TaskBaseRecords(TaskBaseRecord entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationRecord = null;
		}
		
		private void attach_ApplicationCustomVariableGroupRecords(ApplicationCustomVariableGroupRecord entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationRecord = this;
		}
		
		private void detach_ApplicationCustomVariableGroupRecords(ApplicationCustomVariableGroupRecord entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationRecord = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Presto.CustomVariableGroup")]
	public partial class CustomVariableGroupRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Data.Linq.Binary _VersionNumber;
		
		private EntitySet<CustomVariableRecord> _CustomVariableRecords;
		
		private EntitySet<ApplicationCustomVariableGroupRecord> _ApplicationCustomVariableGroupRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVersionNumberChanging(System.Data.Linq.Binary value);
    partial void OnVersionNumberChanged();
    #endregion
		
		public CustomVariableGroupRecord()
		{
			this._CustomVariableRecords = new EntitySet<CustomVariableRecord>(new Action<CustomVariableRecord>(this.attach_CustomVariableRecords), new Action<CustomVariableRecord>(this.detach_CustomVariableRecords));
			this._ApplicationCustomVariableGroupRecords = new EntitySet<ApplicationCustomVariableGroupRecord>(new Action<ApplicationCustomVariableGroupRecord>(this.attach_ApplicationCustomVariableGroupRecords), new Action<ApplicationCustomVariableGroupRecord>(this.detach_ApplicationCustomVariableGroupRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionNumber", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionNumber
		{
			get
			{
				return this._VersionNumber;
			}
			set
			{
				if ((this._VersionNumber != value))
				{
					this.OnVersionNumberChanging(value);
					this.SendPropertyChanging();
					this._VersionNumber = value;
					this.SendPropertyChanged("VersionNumber");
					this.OnVersionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomVariableGroup_CustomVariableRecord", Storage="_CustomVariableRecords", ThisKey="Id", OtherKey="CustomVariableGroupId")]
		public EntitySet<CustomVariableRecord> CustomVariableRecords
		{
			get
			{
				return this._CustomVariableRecords;
			}
			set
			{
				this._CustomVariableRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomVariableGroup_ApplicationCustomVariableGroup", Storage="_ApplicationCustomVariableGroupRecords", ThisKey="Id", OtherKey="CustomVariableGroupId")]
		public EntitySet<ApplicationCustomVariableGroupRecord> ApplicationCustomVariableGroupRecords
		{
			get
			{
				return this._ApplicationCustomVariableGroupRecords;
			}
			set
			{
				this._ApplicationCustomVariableGroupRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomVariableRecords(CustomVariableRecord entity)
		{
			this.SendPropertyChanging();
			entity.CustomVariableGroupRecord = this;
		}
		
		private void detach_CustomVariableRecords(CustomVariableRecord entity)
		{
			this.SendPropertyChanging();
			entity.CustomVariableGroupRecord = null;
		}
		
		private void attach_ApplicationCustomVariableGroupRecords(ApplicationCustomVariableGroupRecord entity)
		{
			this.SendPropertyChanging();
			entity.CustomVariableGroupRecord = this;
		}
		
		private void detach_ApplicationCustomVariableGroupRecords(ApplicationCustomVariableGroupRecord entity)
		{
			this.SendPropertyChanging();
			entity.CustomVariableGroupRecord = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Presto.ApplicationCustomVariableGroup")]
	public partial class ApplicationCustomVariableGroupRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ApplicationId;
		
		private int _CustomVariableGroupId;
		
		private EntityRef<ApplicationRecord> _ApplicationRecord;
		
		private EntityRef<CustomVariableGroupRecord> _CustomVariableGroupRecord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnApplicationIdChanging(int value);
    partial void OnApplicationIdChanged();
    partial void OnCustomVariableGroupIdChanging(int value);
    partial void OnCustomVariableGroupIdChanged();
    #endregion
		
		public ApplicationCustomVariableGroupRecord()
		{
			this._ApplicationRecord = default(EntityRef<ApplicationRecord>);
			this._CustomVariableGroupRecord = default(EntityRef<CustomVariableGroupRecord>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="Int NOT NULL")]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._ApplicationRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomVariableGroupId", DbType="Int NOT NULL")]
		public int CustomVariableGroupId
		{
			get
			{
				return this._CustomVariableGroupId;
			}
			set
			{
				if ((this._CustomVariableGroupId != value))
				{
					if (this._CustomVariableGroupRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomVariableGroupIdChanging(value);
					this.SendPropertyChanging();
					this._CustomVariableGroupId = value;
					this.SendPropertyChanged("CustomVariableGroupId");
					this.OnCustomVariableGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_ApplicationCustomVariableGroup", Storage="_ApplicationRecord", ThisKey="ApplicationId", OtherKey="Id", IsForeignKey=true)]
		public ApplicationRecord ApplicationRecord
		{
			get
			{
				return this._ApplicationRecord.Entity;
			}
			set
			{
				ApplicationRecord previousValue = this._ApplicationRecord.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationRecord.Entity = null;
						previousValue.ApplicationCustomVariableGroupRecords.Remove(this);
					}
					this._ApplicationRecord.Entity = value;
					if ((value != null))
					{
						value.ApplicationCustomVariableGroupRecords.Add(this);
						this._ApplicationId = value.Id;
					}
					else
					{
						this._ApplicationId = default(int);
					}
					this.SendPropertyChanged("ApplicationRecord");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomVariableGroup_ApplicationCustomVariableGroup", Storage="_CustomVariableGroupRecord", ThisKey="CustomVariableGroupId", OtherKey="Id", IsForeignKey=true)]
		public CustomVariableGroupRecord CustomVariableGroupRecord
		{
			get
			{
				return this._CustomVariableGroupRecord.Entity;
			}
			set
			{
				CustomVariableGroupRecord previousValue = this._CustomVariableGroupRecord.Entity;
				if (((previousValue != value) 
							|| (this._CustomVariableGroupRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomVariableGroupRecord.Entity = null;
						previousValue.ApplicationCustomVariableGroupRecords.Remove(this);
					}
					this._CustomVariableGroupRecord.Entity = value;
					if ((value != null))
					{
						value.ApplicationCustomVariableGroupRecords.Add(this);
						this._CustomVariableGroupId = value.Id;
					}
					else
					{
						this._CustomVariableGroupId = default(int);
					}
					this.SendPropertyChanged("CustomVariableGroupRecord");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
